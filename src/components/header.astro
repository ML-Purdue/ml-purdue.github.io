---
import { Icon } from "astro-icon";

import type { NavItem } from "~/types";
import mlPurdueLogo from "~/assets/mlp.png";
import Logo from "./logo.astro";
export interface Props {
  fixed?: boolean;
}
const navItems: Array<NavItem> = [
  { title: "About", url: "/about" },
  {
    title: "Projects",
    url: "/projects",
  },
  {
    title: "Reading Group",
    url: "/reading-group",
  },
  {
    title: "Workshops",
    url: "/workshops",
  },
  {
    title: "Sponsor",
    url: "/sponsor",
  },
];
const { fixed } = Astro.props;
---

<header
  id="page-header"
  data-fixed={fixed ? "1" : "0"}
  class={`absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white ${
    fixed ? "fixed-header" : ""
  }`}
>
  <a class="hover:!text-default" href="/">
    <img src={mlPurdueLogo.src} alt="Logo" class="h-[4rem]" />
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url, sublinks }) => (
              <li class="relative">
                {(sublinks?.length || 0) > 0 ? (
                  <>
                    <button class="hover-button flex items-center justify-center gap-2 font-bold text-sm">
                      {title}
                      <svg
                        height="16"
                        width="16"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="white"
                        height="8rem"
                        width="8rem"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </button>
                    <ul
                      data-hover-link-container
                      class="pointer-events-none  absolute flex w-max min-w-[100px]
                     flex-col border-2  border-solid border-[white] bg-[var(--color-background)] p-2 opacity-0 transition-opacity text-sm"
                    >
                      {sublinks?.map((x) => (
                        <a href={x.url}>{x.title}</a>
                      ))}
                    </ul>
                  </>
                ) : (
                  <a class="font-semibold text-sm" href={url}>
                    {title}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex items-center justify-center -ml-3 w-screen pb-2">
            <a class="hover:!text-default" href="/">
              <img src={mlPurdueLogo.src} alt="Logo" class="h-[5rem]" />
            </a>
            <div class="flex items-center justify-center lg:mb-0">
              <h1 class="orbitron text-center font-bold text-white text-8xl">ML</h1>
              <h2
                class="orbitron -ml-6 mb-4 text-center text-white text-3xl md:-ml-10 md:text-5xl"
              >
                @
              </h2>
              <h1
                class="orbitron ml-3 text-center font-semibold text-white text-6xl sm:ml-5"
              >
                PURDUE
              </h1>
            </div>
          </div>
          <nav>
            <ul class="flex flex-col -mt-2 sm:mt-0">
              {
                navItems.map(({ title, url, sublinks }) => (
                  <li>
                    {(sublinks?.length || 0) > 0 ? (
                      <div>
                        <span class="ml-8 block py-4 text-xl">{title}</span>
                        <div>
                          {sublinks?.map(({ title, url }) => (
                            <a class="ml-16 block py-4 text-xl" href={url}>
                              {title}
                            </a>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <a class="flex text-base items-center justify-center" href={url}>
                        <div class="flex orbitron w-[90vw] hover:text-purple-500 lowercase glass py-4 mb-3">
                          {title}
                        </div>
                      </a>
                    )}
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  function updateHoverLinks(fixedHeader: boolean) {
    const uls: HTMLUListElement[] = Array.from(
      document.querySelectorAll("[data-hover-link-container]")
    );
    uls.forEach((ul) => {
      if (fixedHeader) {
        ul.style.top = "unset";
        return;
      }
      const { height } = ul.getBoundingClientRect();
      ul.style.top = `-${height}px`;
    });
  }
  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);
  const hasFixedHeader = header.dataset.fixed === "1";
  if (!hasFixedHeader) {
    document.addEventListener("scroll", () => {
      const d = page.clientHeight - page.scrollTop - header.offsetHeight;
      header.classList.toggle("fixed-header", d < 0);
      header.dataset.fixed = `${Number(d < 0)}`;
      updateHoverLinks(d < 0);
    });
  }
  updateHoverLinks(hasFixedHeader);

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
  window.addEventListener("resize", () => {
    updateHoverLinks(hasFixedHeader);
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  [data-hover-link-container] {
    position: absolute;
    left: 0;
    z-index: 10;
    top: 100%; /* fallback in case JS hasnâ€™t run yet */
  }

  ul:hover,
  .hover-button:active + ul,
  .hover-button:focus + ul,
  .hover-button:hover + ul {
    opacity: 1;
    pointer-events: all;
  }

  header.fixed-header[data-fixed="1"] {
    @apply fixed top-0 bottom-auto;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
